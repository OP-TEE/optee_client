/*
 * Copyright (c) 2017-2018, Linaro Limited
 *
 * SPDX-License-Identifier: BSD-2-Clause
 */

#ifndef __HELPERS_CK_H
#define __HELPERS_CK_H

#include <pkcs11.h>
#include <stdint.h>
#include <stddef.h>
#include <sks_ta.h>
#include <tee_client_api.h>

/*
 * Various conversion between PKCS#11 IDs and SKS IDs
 */

/* sks-to-ck only: this is not a one-to-one relationship */
#define CK_SKS_ERROR_CODES \
	CK_SKS_ID(CKR_OK,			SKS_OK) \
	CK_SKS_ID(CKR_GENERAL_ERROR,		SKS_ERROR) \
	CK_SKS_ID(CKR_DEVICE_MEMORY,		SKS_MEMORY) \
	CK_SKS_ID(CKR_ARGUMENTS_BAD,		SKS_BAD_PARAM) \
	CK_SKS_ID(CKR_BUFFER_TOO_SMALL,		SKS_SHORT_BUFFER) \
	CK_SKS_ID(CKR_FUNCTION_FAILED,		SKS_FAILED) \
	CK_SKS_ID(CKR_GENERAL_ERROR,		SKS_NOT_FOUND)	/* No Cryptoki equivalent */ \
	CK_SKS_ID(CKR_ATTRIBUTE_TYPE_INVALID,	SKS_INVALID_TYPE) \
	CK_SKS_ID(CKR_ATTRIBUTE_VALUE_INVALID,	SKS_INVALID_VALUE) \
	CK_SKS_ID(CKR_OBJECT_HANDLE_INVALID,	SKS_INVALID_OBJECT) \
	CK_SKS_ID(CKR_KEY_HANDLE_INVALID,	SKS_INVALID_KEY) \
	CK_SKS_ID(CKR_MECHANISM_INVALID,	SKS_INVALID_PROC) \
	CK_SKS_ID(CKR_SLOT_ID_INVALID,		SKS_INVALID_SLOT) \
	CK_SKS_ID(CKR_PIN_INCORRECT,		SKS_PIN_INCORRECT) \
	CK_SKS_ID(CKR_PIN_LOCKED,		SKS_PIN_LOCKED) \
	CK_SKS_ID(CKR_PIN_EXPIRED,		SKS_PIN_EXPIRED) \
	CK_SKS_ID(CKR_PIN_INVALID,		SKS_PIN_INVALID) \
	CK_SKS_ID(CKR_OPERATION_ACTIVE,		SKS_PROCESSING_ACTIVE) \
	CK_SKS_ID(CKR_KEY_FUNCTION_NOT_PERMITTED,	SKS_CK_NOT_PERMITTED) \
	CK_SKS_ID(CKR_OPERATION_NOT_INITIALIZED,	SKS_PROCESSING_INACTIVE) \
	CK_SKS_ID(CKR_SESSION_READ_ONLY,	SKS_CK_SESSION_IS_READ_ONLY) \
	CK_SKS_ID(CKR_MECHANISM_PARAM_INVALID,	SKS_INVALID_PROC_PARAM) \
	CK_SKS_ID(CK_VENDOR_INVALID_ID,		SKS_UNDEFINED_ID)

#define CK_SKS_SLOT_FLAG_MASKS \
	CK_SKS_ID(CKF_TOKEN_PRESENT,	SKS_TOKEN_PRESENT) \
	CK_SKS_ID(CKF_REMOVABLE_DEVICE,	SKS_TOKEN_REMOVABLE) \
	CK_SKS_ID(CKF_HW_SLOT,		SKS_TOKEN_HW)

#define CK_SKS_TOKEN_FLAG_MASKS \
	CK_SKS_ID(CKF_RNG,				SKS_TOKEN_HAS_RNG) \
	CK_SKS_ID(CKF_WRITE_PROTECTED,			SKS_TOKEN_IS_READ_ONLY) \
	CK_SKS_ID(CKF_LOGIN_REQUIRED,			SKS_TOKEN_REQUIRE_LOGIN) \
	CK_SKS_ID(CKF_USER_PIN_INITIALIZED,		SKS_TOKEN_HAS_USER_PIN) \
	CK_SKS_ID(CKF_RESTORE_KEY_NOT_NEEDED,		SKS_TOKEN_FULLY_RESTORABLE) \
	CK_SKS_ID(CKF_CLOCK_ON_TOKEN,			SKS_TOKEN_HAS_CLOCK) \
	CK_SKS_ID(CKF_PROTECTED_AUTHENTICATION_PATH,	SKS_TOKEN_ALT_AUTHENT) \
	CK_SKS_ID(CKF_DUAL_CRYPTO_OPERATIONS,		SKS_TOKEN_CAN_DUAL_PROC) \
	CK_SKS_ID(CKF_TOKEN_INITIALIZED,		SKS_TOKEN_INITED) \
	CK_SKS_ID(CKF_USER_PIN_COUNT_LOW,		SKS_TOKEN_USR_PIN_FAILURE) \
	CK_SKS_ID(CKF_USER_PIN_FINAL_TRY,		SKS_TOKEN_USR_PIN_LAST) \
	CK_SKS_ID(CKF_USER_PIN_LOCKED,			SKS_TOKEN_USR_PIN_LOCKED) \
	CK_SKS_ID(CKF_USER_PIN_TO_BE_CHANGED,		SKS_TOKEN_USR_PIN_TO_CHANGE) \
	CK_SKS_ID(CKF_SO_PIN_COUNT_LOW,			SKS_TOKEN_SO_PIN_FAILURE) \
	CK_SKS_ID(CKF_SO_PIN_FINAL_TRY,			SKS_TOKEN_SO_PIN_LAST) \
	CK_SKS_ID(CKF_SO_PIN_LOCKED,			SKS_TOKEN_SO_PIN_LOCKED) \
	CK_SKS_ID(CKF_SO_PIN_TO_BE_CHANGED,		SKS_TOKEN_SO_PIN_TO_CHANGE) \
	CK_SKS_ID(CKF_ERROR_STATE,			SKS_TOKEN_BAD_STATE)

#define CK_SKS_MECHANISM_FLAG_IDS \
	CK_SKS_ID(CKF_HW,			SKS_PROC_HW) \
	CK_SKS_ID(CKF_ENCRYPT,			SKS_PROC_ENCRYPT) \
	CK_SKS_ID(CKF_DECRYPT,			SKS_PROC_DECRYPT) \
	CK_SKS_ID(CKF_DIGEST,			SKS_PROC_DIGEST) \
	CK_SKS_ID(CKF_SIGN,			SKS_PROC_SIGN) \
	CK_SKS_ID(CKF_SIGN_RECOVER,		SKS_PROC_SIGN_RECOVER) \
	CK_SKS_ID(CKF_VERIFY,			SKS_PROC_VERIFY) \
	CK_SKS_ID(CKF_VERIFY_RECOVER,		SKS_PROC_VERFIY_RECOVER) \
	CK_SKS_ID(CKF_GENERATE,			SKS_PROC_GENERATE) \
	CK_SKS_ID(CKF_GENERATE_KEY_PAIR,	SKS_PROC_GENERATE_PAIR) \
	CK_SKS_ID(CKF_WRAP,			SKS_PROC_WRAP) \
	CK_SKS_ID(CKF_UNWRAP,			SKS_PROC_UNWRAP) \
	CK_SKS_ID(CKF_DERIVE,			SKS_PROC_DERIVE)

#define CK_SKS_PROCESSING_IDS \
	CK_SKS_ID(CKM_AES_ECB,			SKS_PROC_AES_ECB_NOPAD) \
	CK_SKS_ID(CKM_AES_CBC,			SKS_PROC_AES_CBC_NOPAD) \
	CK_SKS_ID(CKM_AES_CBC_PAD,		SKS_PROC_AES_CBC_PAD) \
	CK_SKS_ID(CKM_AES_CTR,			SKS_PROC_AES_CTR) \
	CK_SKS_ID(CKM_AES_GCM,			SKS_PROC_AES_GCM) \
	CK_SKS_ID(CKM_AES_CCM,			SKS_PROC_AES_CCM) \
	CK_SKS_ID(CKM_AES_CTS,			SKS_PROC_AES_CTS) \
	CK_SKS_ID(CKM_AES_GMAC,			SKS_PROC_AES_GMAC) \
	CK_SKS_ID(CKM_AES_CMAC,			SKS_PROC_AES_CMAC) \
	CK_SKS_ID(CKM_AES_CMAC_GENERAL,		SKS_PROC_AES_CMAC_GENERAL) \
	CK_SKS_ID(CKM_AES_ECB_ENCRYPT_DATA,	SKS_PROC_AES_DERIVE_BY_ECB) \
	CK_SKS_ID(CKM_AES_CBC_ENCRYPT_DATA,	SKS_PROC_AES_DERIVE_BY_CBC) \
	CK_SKS_ID(CKM_AES_KEY_GEN,		SKS_PROC_AES_GENERATE) \
	CK_SKS_ID(CKM_GENERIC_SECRET_KEY_GEN,	SKS_PROC_GENERIC_GENERATE) \
	CK_SKS_ID(CKM_MD5_HMAC,			SKS_PROC_HMAC_MD5) \
	CK_SKS_ID(CKM_SHA_1_HMAC,		SKS_PROC_HMAC_SHA1) \
	CK_SKS_ID(CKM_SHA224_HMAC,		SKS_PROC_HMAC_SHA224) \
	CK_SKS_ID(CKM_SHA256_HMAC,		SKS_PROC_HMAC_SHA256) \
	CK_SKS_ID(CKM_SHA384_HMAC,		SKS_PROC_HMAC_SHA384) \
	CK_SKS_ID(CKM_SHA512_HMAC,		SKS_PROC_HMAC_SHA512) \
	CK_SKS_ID(CKM_AES_XCBC_MAC,		SKS_PROC_AES_CBC_MAC) \
	CK_SKS_ID(CK_VENDOR_INVALID_ID,		SKS_UNDEFINED_ID)

#define CK_SKS_ATTRIBS_ID \
	CK_SKS_ID(CKA_CLASS,			SKS_CLASS) \
	CK_SKS_ID(CKA_KEY_TYPE,			SKS_TYPE) \
	CK_SKS_ID(CKA_VALUE,			SKS_VALUE) \
	CK_SKS_ID(CKA_VALUE_LEN,		SKS_VALUE_LEN) \
	CK_SKS_ID(CKA_WRAP_TEMPLATE,		SKS_WRAP_ATTRIBS) \
	CK_SKS_ID(CKA_UNWRAP_TEMPLATE,		SKS_UNWRAP_ATTRIBS) \
	CK_SKS_ID(CKA_DERIVE_TEMPLATE,		SKS_DERIVE_ATTRIBS) \
	CK_SKS_ID(CKA_START_DATE,		SKS_ACTIVATION_DATE) \
	CK_SKS_ID(CKA_END_DATE,			SKS_REVOKATION_DATE) \
	CK_SKS_ID(CKA_OBJECT_ID,		SKS_OBJECT_ID) \
	CK_SKS_ID(CKA_APPLICATION,		SKS_APPLICATION_ID) \
	CK_SKS_ID(CKA_MECHANISM_TYPE,		SKS_PROCESSING_ID) \
	CK_SKS_ID(CKA_ID,			SKS_KEY_ID) \
	CK_SKS_ID(CKA_ALLOWED_MECHANISMS,	SKS_ALLOWED_PROCESSINGS) \
	/* Below are boolean attributes */\
	CK_SKS_ID(CKA_TOKEN,			SKS_PERSISTENT) \
	CK_SKS_ID(CKA_PRIVATE,			SKS_NEED_AUTHEN) \
	CK_SKS_ID(CKA_TRUSTED,			SKS_TRUSTED) \
	CK_SKS_ID(CKA_SENSITIVE,		SKS_SENSITIVE) \
	CK_SKS_ID(CKA_ENCRYPT,			SKS_ENCRYPT) \
	CK_SKS_ID(CKA_DECRYPT,			SKS_DECRYPT) \
	CK_SKS_ID(CKA_WRAP,			SKS_WRAP) \
	CK_SKS_ID(CKA_UNWRAP,			SKS_UNWRAP) \
	CK_SKS_ID(CKA_SIGN,			SKS_SIGN) \
	CK_SKS_ID(CKA_SIGN_RECOVER,		SKS_SIGN_RECOVER) \
	CK_SKS_ID(CKA_VERIFY,			SKS_VERIFY) \
	CK_SKS_ID(CKA_VERIFY_RECOVER,		SKS_VERIFY_RECOVER) \
	CK_SKS_ID(CKA_DERIVE,			SKS_DERIVE) \
	CK_SKS_ID(CKA_EXTRACTABLE,		SKS_EXTRACTABLE) \
	CK_SKS_ID(CKA_LOCAL,			SKS_LOCALLY_GENERATED) \
	CK_SKS_ID(CKA_NEVER_EXTRACTABLE,	SKS_NEVER_EXTRACTABLE) \
	CK_SKS_ID(CKA_ALWAYS_SENSITIVE,		SKS_ALWAYS_SENSITIVE) \
	CK_SKS_ID(CKA_MODIFIABLE,		SKS_MODIFIABLE) \
	CK_SKS_ID(CKA_COPYABLE,			SKS_COPYABLE) \
	CK_SKS_ID(CKA_DESTROYABLE,		SKS_DESTROYABLE) \
	CK_SKS_ID(CKA_ALWAYS_AUTHENTICATE,	SKS_ALWAYS_AUTHEN) \
	CK_SKS_ID(CKA_WRAP_WITH_TRUSTED,	SKS_WRAP_FROM_TRUSTED) \
	/* Specifc SKS attribute IDs */ \
	CK_SKS_ID(CK_VENDOR_INVALID_ID,		SKS_UNDEFINED_ID)

#define CK_SKS_OBJECT_CLASS_IDS \
	CK_SKS_ID(CKO_SECRET_KEY,		SKS_OBJ_SYM_KEY) \
	CK_SKS_ID(CKO_PUBLIC_KEY,		SKS_OBJ_PUB_KEY) \
	CK_SKS_ID(CKO_PRIVATE_KEY,		SKS_OBJ_PRIV_KEY) \
	CK_SKS_ID(CKO_OTP_KEY,			SKS_OBJ_OTP_KEY) \
	CK_SKS_ID(CKO_CERTIFICATE,		SKS_OBJ_CERTIFICATE) \
	CK_SKS_ID(CKO_DATA,			SKS_OBJ_RAW_DATA) \
	CK_SKS_ID(CKO_DOMAIN_PARAMETERS,	SKS_OBJ_CK_DOMAIN_PARAMS) \
	CK_SKS_ID(CKO_HW_FEATURE,		SKS_OBJ_CK_HW_FEATURES) \
	CK_SKS_ID(CKO_MECHANISM,		SKS_OBJ_CK_MECHANISM) \
	CK_SKS_ID(CK_VENDOR_INVALID_ID,		SKS_UNDEFINED_ID)

#define CK_SKS_KEY_TYPE_IDS \
	CK_SKS_ID(CKK_AES,			SKS_KEY_AES) \
	CK_SKS_ID(CKK_GENERIC_SECRET,		SKS_GENERIC_SECRET) \
	CK_SKS_ID(CKK_MD5_HMAC,			SKS_KEY_HMAC_MD5) \
	CK_SKS_ID(CKK_SHA_1_HMAC,		SKS_KEY_HMAC_SHA1) \
	CK_SKS_ID(CKK_SHA224_HMAC,		SKS_KEY_HMAC_SHA224) \
	CK_SKS_ID(CKK_SHA256_HMAC,		SKS_KEY_HMAC_SHA256) \
	CK_SKS_ID(CKK_SHA384_HMAC,		SKS_KEY_HMAC_SHA384) \
	CK_SKS_ID(CKK_SHA512_HMAC,		SKS_KEY_HMAC_SHA512) \
	CK_SKS_ID(CK_VENDOR_INVALID_ID,		SKS_UNDEFINED_ID)

/*
 * Convert structure struct sks_ck_token_info retreived from TA into a
 * cryptoki API compliant CK_TOKEN_INFO structure.
 *
 * struct sks_ck_token_info is defined in the SKS TA API.
 */
CK_RV sks2ck_token_info(CK_TOKEN_INFO_PTR ck_info,
			struct sks_ck_token_info *sks_info);
CK_RV sks2ck_slot_info(CK_SLOT_INFO_PTR ck_info,
			struct sks_ck_slot_info *sks_info);

/*
 * Convert IDs between SKS and Cryptoki.
 */
CK_RV sks2ck_mechanism_type(CK_MECHANISM_TYPE *ck, uint32_t sks);
uint32_t ck2sks_mechanism_type(CK_MECHANISM_TYPE ck);

CK_RV sks2ck_attribute_id(CK_ULONG *ck, uint32_t sks);
uint32_t ck2sks_attribute_id(CK_ULONG ck);

CK_RV sks2ck_token_flag(CK_FLAGS *ck, uint32_t sks);
uint32_t ck2sks_token_flag(CK_FLAGS ck);

CK_RV sks2ck_mechanism_type_list(CK_MECHANISM_TYPE *dst, void *sks,
				 size_t count);
CK_RV sks2ck_mechanism_flag(CK_FLAGS *ck, uint32_t sks);
CK_RV sks2ck_mechanism_info(CK_MECHANISM_INFO *info, void *sks);

uint32_t ck2sks_class(CK_ULONG ck);
CK_RV sks2ck_class(CK_ULONG *ck, uint32_t sks);

uint32_t ck2sks_type_in_class(CK_ULONG ck, CK_ULONG class);
CK_RV sks2ck_type_in_class(CK_ULONG *ck, uint32_t sks, CK_ULONG class);

uint32_t ck2sks_key_type(CK_ULONG ck);
CK_RV sks2ck_key_type(CK_ULONG *ck, uint32_t sks);

int sks_attr2boolprop_shift(CK_ULONG attr);

CK_RV sks2ck_rv(uint32_t sks);
CK_RV teec2ck_rv(TEEC_Result res);

/*
 * Helper functions to analyse CK fields
 */
size_t ck_attr_is_class(uint32_t attribute_id);
size_t ck_attr_is_type(uint32_t attribute_id);
int ck_attr2boolprop_shift(CK_ULONG attr);

int sks_object_has_boolprop(uint32_t class);
int sks_class_has_type(uint32_t class);

#endif /*__HELPERS_CK_H*/
